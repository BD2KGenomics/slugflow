from nacl import encoding as encoding
from nacl.utils import StringFixer as StringFixer, random as random
from typing import Any, Optional

class SignedMessage(bytes):
    @property
    def signature(self): ...
    @property
    def message(self): ...

class VerifyKey(encoding.Encodable, StringFixer):
    def __init__(self, key: Any, encoder: Any = ...) -> None: ...
    def __bytes__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def verify(self, smessage: Any, signature: Optional[Any] = ..., encoder: Any = ...): ...
    def to_curve25519_public_key(self): ...

class SigningKey(encoding.Encodable, StringFixer):
    verify_key: Any = ...
    def __init__(self, seed: Any, encoder: Any = ...) -> None: ...
    def __bytes__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @classmethod
    def generate(cls): ...
    def sign(self, message: Any, encoder: Any = ...): ...
    def to_curve25519_private_key(self): ...

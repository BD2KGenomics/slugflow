from .callables import CallArgsInfo as CallArgsInfo, UserListener as UserListener, ListenerMismatchError as ListenerMismatchError
from _typeshed import Incomplete
from types import ModuleType
from typing import Any, Callable, Mapping, Sequence

class Topic: ...

class IListenerExcHandler:
    def __call__(self, listenerID: str, topicObj: Topic): ...

class Listener:
    AUTO_TOPIC: Incomplete
    acceptsAllKwargs: Incomplete
    curriedArgs: Incomplete
    def __init__(self, callable_obj: UserListener, argsInfo: CallArgsInfo, curriedArgs: Mapping[str, Any] = ..., onDead: Callable[[Listener], None] = ...) -> None: ...
    def name(self) -> str: ...
    def typeName(self) -> str: ...
    def module(self) -> ModuleType: ...
    def getCallable(self) -> UserListener: ...
    def isDead(self) -> bool: ...
    def wantsTopicObjOnCall(self) -> bool: ...
    def wantsAllMessageData(self) -> bool: ...
    def setCurriedArgs(self, **curriedArgs) -> None: ...
    def __call__(self, kwargs: Mapping[str, Any], actualTopic: Topic, allKwargs: Mapping[str, Any] = ...): ...

class ListenerValidator:
    def __init__(self, topicArgs: Sequence[str], topicKwargs: Sequence[str]) -> None: ...
    def validate(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> CallArgsInfo: ...
    def isValid(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> bool: ...

from nacl import encoding as encoding
from nacl.utils import EncryptedMessage as EncryptedMessage, StringFixer as StringFixer, random as random
from typing import Any, Optional

class PublicKey(encoding.Encodable, StringFixer):
    SIZE: Any = ...
    def __init__(self, public_key: Any, encoder: Any = ...) -> None: ...
    def __bytes__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class PrivateKey(encoding.Encodable, StringFixer):
    SIZE: Any = ...
    SEED_SIZE: Any = ...
    public_key: Any = ...
    def __init__(self, private_key: Any, encoder: Any = ...) -> None: ...
    @classmethod
    def from_seed(cls, seed: Any, encoder: Any = ...): ...
    def __bytes__(self): ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    @classmethod
    def generate(cls): ...

class Box(encoding.Encodable, StringFixer):
    NONCE_SIZE: Any = ...
    def __init__(self, private_key: Any, public_key: Any) -> None: ...
    def __bytes__(self): ...
    @classmethod
    def decode(cls, encoded: Any, encoder: Any = ...): ...
    def encrypt(self, plaintext: Any, nonce: Optional[Any] = ..., encoder: Any = ...): ...
    def decrypt(self, ciphertext: Any, nonce: Optional[Any] = ..., encoder: Any = ...): ...
    def shared_key(self): ...

class SealedBox(encoding.Encodable, StringFixer):
    def __init__(self, recipient_key: Any) -> None: ...
    def __bytes__(self): ...
    def encrypt(self, plaintext: Any, encoder: Any = ...): ...
    def decrypt(self, ciphertext: Any, encoder: Any = ...): ...

import argparse
# from _typeshed import Incomplete
from typing import Sequence, Dict, Any, Tuple, List, overload, TypeVar, OrderedDict, Type

__all__ = [
    "ArgumentParser",
    "YAMLConfigFileParser",
    "ConfigFileParser"
]
_N = TypeVar("_N")

# ACTION_TYPES_THAT_DONT_NEED_A_VALUE: Incomplete
# is_boolean_optional_action: Incomplete

# def init_argument_parser(name: str | None = ..., **kwargs: Any) -> None: ...
# def get_argument_parser(name: str | None = ..., **kwargs): ...
#
# class ArgumentDefaultsRawHelpFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawTextHelpFormatter, argparse.RawDescriptionHelpFormatter): ...
#
class ConfigFileParser(object):
    def get_syntax_description(self) -> Any: ...
    def parse(self, stream: Any) -> Any: ...
    def serialize(self, items: OrderedDict[Any, Any]) -> Any: ...

# class ConfigFileParserException(Exception): ...
#
# class DefaultConfigFileParser(ConfigFileParser):
#     def get_syntax_description(self): ...
#     def parse(self, stream): ...
#     def serialize(self, items): ...
#
# class ConfigparserConfigFileParser(ConfigFileParser):
#     def get_syntax_description(self): ...
#     def parse(self, stream): ...
#     def serialize(self, items): ...
#
class YAMLConfigFileParser(ConfigFileParser):
    def get_syntax_description(self) -> str: ...
    def parse(self, stream: Any) -> OrderedDict[Any, Any]: ...
    def serialize(self, items: OrderedDict[Any, Any], default_flow_style: bool = ...) -> Any: ...
#
# def is_quoted(text, triple: bool = ...): ...
# def unquote_str(text, triple: bool = ...): ...
# def parse_toml_section_name(section_name): ...
# def get_toml_section(data, section): ...
#
# class TomlConfigParser(ConfigFileParser):
#     # sections: Incomplete
#     def __init__(self, sections) -> None: ...
#     def __call__(self): ...
#     def parse(self, stream): ...
#     def get_syntax_description(self): ...
#
# class IniConfigParser(ConfigFileParser):
#     # sections: Incomplete
#     # split_ml_text_to_list: Incomplete
#     def __init__(self, sections, split_ml_text_to_list) -> None: ...
#     def __call__(self): ...
#     def parse(self, stream): ...
#     def get_syntax_description(self): ...
#
# class CompositeConfigParser(ConfigFileParser):
#     # parsers: Incomplete
#     def __init__(self, config_parser_types) -> None: ...
#     def __call__(self): ...
#     def parse(self, stream): ...
#     def get_syntax_description(self): ...

class ArgumentParser(argparse.ArgumentParser):
    @property
    def _config_file_parser(self) -> Any: ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    # def parse_args(self, args: Sequence[str] | None = ..., namespace: Namespace | None = ..., config_file_contents: str | None = ..., env_vars: Any=...) -> Namespace: ...
    @overload
    def parse_args(self, args: Sequence[str] | None = None, namespace: None = None, config_file_contents: str | None = ..., env_vars: Any=...) -> Namespace: ...  # type: ignore[misc]
    @overload
    def parse_args(self, args: Sequence[str] | None, namespace: _N, config_file_contents: str | None = ..., env_vars: Any=...) -> _N: ...
    @overload
    def parse_args(self, *, namespace: _N, config_file_contents: str | None = ..., env_vars: Any=...) -> _N: ...

    def parse_known_args(self, args: Sequence[str] | None = ..., namespace: Namespace | None = ..., config_file_contents: str | None = ..., env_vars: Any=..., ignore_help_args: bool = ...) -> Tuple[Namespace, List[str]]: ...
    # def get_source_to_settings_dict(self): ...
    # def write_config_file(self, parsed_namespace, output_file_paths, exit_after: bool = ...) -> None: ...
    # def get_command_line_key_for_unknown_config_file_setting(self, key): ...
    # def get_items_for_config_file_output(self, source_to_settings, parsed_namespace): ...
    # def convert_item_to_command_line_arg(self, action, key, value): ...
    # def get_possible_config_keys(self, action): ...
    # def format_values(self): ...
    # def print_values(self, file=...) -> None: ...
    # def format_help(self): ...
#
# def add_argument(self, *args, **kwargs): ...
# def already_on_command_line(existing_args_list, potential_command_line_args, prefix_chars): ...
# Action = argparse.Action
# ArgumentDefaultsHelpFormatter = argparse.ArgumentDefaultsHelpFormatter
# ArgumentError = argparse.ArgumentError
# ArgumentTypeError = argparse.ArgumentTypeError
# FileType = argparse.FileType
# HelpFormatter = argparse.HelpFormatter
# MetavarTypeHelpFormatter = argparse.MetavarTypeHelpFormatter
Namespace = argparse.Namespace
# RawDescriptionHelpFormatter = argparse.RawDescriptionHelpFormatter
# RawTextHelpFormatter = argparse.RawTextHelpFormatter
# # ONE_OR_MORE: Incomplete
# # OPTIONAL: Incomplete
# # PARSER: Incomplete
# # REMAINDER: Incomplete
# # SUPPRESS: Incomplete
# # ZERO_OR_MORE: Incomplete
# initArgumentParser = init_argument_parser
# getArgumentParser = get_argument_parser
# getArgParser = get_argument_parser
# getParser = get_argument_parser
# get_arg_parser = get_argument_parser
# get_parser = get_argument_parser
ArgParser = ArgumentParser
# Parser = ArgumentParser
# RawFormatter = RawDescriptionHelpFormatter
# DefaultsFormatter = ArgumentDefaultsHelpFormatter
# DefaultsRawFormatter = ArgumentDefaultsRawHelpFormatter
